package com.example.prilogeniezmeyka  /* имя пакета программы */

/*Библиотеки программы, первые две - автоматические, остальные нужны для работы приложения*/
import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.View
import com.example.prilogeniezmeyka.databinding.ActivityCircleBinding
import kotlin.math.pow

/*основной класс, в котором происходит реализация проекта. Правильно это назвается "жизненный цикл проекта"*/
class Circle : AppCompatActivity() {
    /*ниже мы активируем наш ViewBinding (подробнее про эту функцию прочитай в файле блокнота*/
    lateinit var bindingCir: ActivityCircleBinding
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        bindingCir = ActivityCircleBinding.inflate(layoutInflater)
        setContentView(bindingCir.root)
    }
/*функция, которая нам выдает результат при нажатии на кнопку "вычислить"*/
    fun onClickResult_circle(view: View){
        if(!isFieldEmpty_circle()) { /*если функция isFieldEmpty_circle верна, тогда*/
            val result_circle = getString(R.string.result_info_circle) + getResult_circle() + getString(
                R.string.result_info_circle_sm
            ) /*создаем переменную равную нашей функции
 getResult_circle*/
            bindingCir.tvResultCircle.text = result_circle /* выводим всё это в поле "Площадь вашего круга"*/
        }
    }
/*функция проверки заполненности полей*/
    private fun isFieldEmpty_circle():Boolean{
        bindingCir.apply {/*здесь он проверяет, если поле А не заполнено, выдает ошибку, если заполнено,
то значит функция верная*/
            if (edACir.text.isNullOrEmpty()) edACir.error = "Поле должно быть заполнено"
            return edACir.text.isNullOrEmpty()
        }
    }

    /*функция для рассчета результат*/
    private fun getResult_circle(): String{
        val a: Double /*создаем переменную а*/
        bindingCir.apply {
            a = edACir.text.toString().toDouble() /*переменная а у нас будет равна введеному пользователем значению,
    преобразованное сначало в тип строки, а потом в тип дробных чисел для дальнейшего подсчета*/
        }
        return (3.14 * (a.pow(2))).toString() /*здесь мы пишем нашу формулу по которой всё считаем*/
    }

    /*эта функция для кнопки выхода в главное меню*/
    fun onClickMain(view: View){
        val intent = Intent(this, MainActivity::class.java)
        startActivity(intent)
    }
}